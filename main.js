/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var R=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var V=Object.getOwnPropertyNames;var U=Object.prototype.hasOwnProperty;var O=(T,x)=>{for(var t in x)R(T,t,{get:x[t],enumerable:!0})},$=(T,x,t,e)=>{if(x&&typeof x=="object"||typeof x=="function")for(let s of V(x))!U.call(T,s)&&s!==t&&R(T,s,{get:()=>x[s],enumerable:!(e=I(x,s))||e.enumerable});return T};var B=T=>$(R({},"__esModule",{value:!0}),T);var k={};O(k,{default:()=>C});module.exports=B(k);var l=require("obsidian");var D=require("obsidian"),P=class extends D.Modal{constructor(t,e){super(t);this.plugin=e}onOpen(){let{contentEl:t}=this;t.empty(),t.createEl("h2",{text:"Update Dates Actions"});let e=this.plugin.settings.taskFolder,s=this.plugin.settings.defaultExcludedFolders?this.plugin.settings.defaultExcludedFolders.split(",").map(a=>a.trim()):[],g=new Date().toISOString().split("T")[0],i=this.plugin.settings.defaultDateType,f=this.plugin.settings.defaultTaskStatus,w=this.plugin.settings.defaultPriorities.lowest,r=this.plugin.settings.defaultPriorities.low,d=this.plugin.settings.defaultPriorities.normal,o=this.plugin.settings.defaultPriorities.medium,p=this.plugin.settings.defaultPriorities.high,h=this.plugin.settings.defaultPriorities.highest,u=this.plugin.settings.defaultAttributes.hasRecurring,c=this.plugin.settings.defaultAttributes.hasDueDate,b=this.plugin.settings.defaultAttributes.hasScheduledDate,m=this.plugin.settings.defaultAttributes.hasStartDate,S=()=>{let a=[];return w&&a.push("lowest"),r&&a.push("low"),d&&a.push("normal"),o&&a.push("medium"),p&&a.push("high"),h&&a.push("highest"),a};t.createEl("h3",{text:"Available Actions"}),new D.Setting(t).setName("Highlight past dates").setDesc(`Highlight all past dates in folder: ${e}`).addButton(a=>a.setButtonText("Execute").setIcon("eye").onClick(()=>{this.plugin.highlightPastDatesInFolderWithExclusions(e,s,g,i,{status:f,priorities:S(),hasRecurring:u,hasDueDate:c,hasScheduledDate:b,hasStartDate:m}),new D.Notice(`Highlighted dates in folder: ${e} (before ${g})`),this.close()})),new D.Setting(t).setName("Unhighlight past dates").setDesc(`Remove highlighting from all dates in folder: ${e}`).addButton(a=>a.setButtonText("Execute").setIcon("eye-off").onClick(()=>{this.plugin.unhighlightPastDatesInFolderWithExclusions(e,s,void 0,i),new D.Notice(`Unhighlighted dates in folder: ${e} (${i} dates)`),this.close()})),new D.Setting(t).setName("Update past dates").setDesc(`Update all past dates in folder: ${e} to selected date`).addButton(a=>a.setButtonText("Execute").setIcon("calendar-check-2").onClick(()=>{this.plugin.updatePastDatesInFolderWithExclusions(e,s,g,i,{status:f,priorities:S(),hasRecurring:u,hasDueDate:c,hasScheduledDate:b,hasStartDate:m}),new D.Notice(`Updated dates in folder: ${e} to ${g} (${i} dates)`),this.close()})),t.createEl("h3",{text:"Settings"}),new D.Setting(t).setName("Target folder").setDesc("Select the folder to process").addText(a=>a.setPlaceholder("folder path").setValue(e).onChange(n=>{e=n,t.querySelectorAll(".setting-item-description").forEach(y=>{var v,N,F;(v=y.textContent)!=null&&v.includes("Highlight all past dates in folder")?y.textContent=`Highlight all past dates in folder: ${e}`:(N=y.textContent)!=null&&N.includes("Remove highlighting from all dates in folder")?y.textContent=`Remove highlighting from all dates in folder: ${e}`:(F=y.textContent)!=null&&F.includes("Update all past dates in folder")&&(y.textContent=`Update all past dates in folder: ${e} to selected date`)})})),new D.Setting(t).setName("Excluded folders").setDesc("Comma-separated list of folders to exclude (e.g. archived,personal)").addText(a=>a.setPlaceholder("folder1,folder2,folder3").setValue(this.plugin.settings.defaultExcludedFolders).onChange(n=>{n?s=n.split(",").map(y=>y.trim()):s=[]})),new D.Setting(t).setName("Target date").setDesc("Select the date to use for updates (defaults to today if not specified)").addText(a=>{let n=a.setPlaceholder("YYYY-MM-DD").setValue(g).onChange(y=>{g=y});return n.inputEl.type="date",n}),new D.Setting(t).setName("Date type").setDesc("Select which type of dates to update").addDropdown(a=>a.addOptions({both:"Both date types",due:"Due dates (\u{1F4C5})",scheduled:"Scheduled dates (\u23F3)"}).setValue(i).onChange(n=>{i=n})),t.createEl("h3",{text:"Task Filtering"}),new D.Setting(t).setName("Task Status").setDesc("Select which tasks to process based on their completion status").addDropdown(a=>a.addOptions({unfinished:"Unfinished tasks",completed:"Completed tasks",all:"All tasks"}).setValue(f).onChange(n=>{f=n})),t.createEl("h4",{text:"Priority Filters"}),new D.Setting(t).setName("Lowest Priority (\u23EC)").addToggle(a=>a.setValue(w).onChange(n=>{w=n})),new D.Setting(t).setName("Low Priority (\u{1F53D})").addToggle(a=>a.setValue(r).onChange(n=>{r=n})),new D.Setting(t).setName("Normal Priority").addToggle(a=>a.setValue(d).onChange(n=>{d=n})),new D.Setting(t).setName("Medium Priority (\u{1F53C})").addToggle(a=>a.setValue(o).onChange(n=>{o=n})),new D.Setting(t).setName("High Priority (\u23EB)").addToggle(a=>a.setValue(p).onChange(n=>{p=n})),new D.Setting(t).setName("Highest Priority (\u{1F53A})").addToggle(a=>a.setValue(h).onChange(n=>{h=n})),t.createEl("h4",{text:"Date Attributes"}),new D.Setting(t).setName("Recurring (\u{1F501})").addToggle(a=>a.setValue(u).setTooltip("Filter for recurring tasks (\u{1F501})").onChange(n=>{u=n})),new D.Setting(t).setName("Due Date (\u{1F4C5})").addToggle(a=>a.setValue(c).setTooltip("Filter for tasks with due dates (\u{1F4C5})").onChange(n=>{c=n})),new D.Setting(t).setName("Scheduled Date (\u23F3)").addToggle(a=>a.setValue(b).setTooltip("Filter for tasks with scheduled dates (\u23F3)").onChange(n=>{b=n})),new D.Setting(t).setName("Start Date (\u{1F6EB})").addToggle(a=>a.setValue(m).setTooltip("Filter for tasks with start dates (\u{1F6EB})").onChange(n=>{m=n}))}onClose(){let{contentEl:t}=this;t.empty()}};var H={taskFolder:"tasks",defaultExcludedFolders:"",defaultDateType:"both",defaultTaskStatus:"unfinished",defaultPriorities:{lowest:!1,low:!1,normal:!1,medium:!1,high:!1,highest:!1},defaultAttributes:{hasRecurring:!1,hasDueDate:!1,hasScheduledDate:!0,hasStartDate:!1}},C=class extends l.Plugin{async onload(){await this.loadSettings(),console.log("loading plugin"),this.addRibbonIcon("calendar-arrow-down","Update Dates",e=>{new P(this.app,this).open()}).addClass("my-plugin-ribbon-class"),this.addCommand({id:"highlight-past-dates",name:"Highlight Past Dates",callback:()=>{this.highlightPastDates()}}),this.addCommand({id:"unhighlight-dates",name:"Unhighlight All Dates",callback:()=>{this.unhighlightDates()}}),this.addCommand({id:"update-past-dates-to-today",name:"Update past dates to today",callback:()=>{this.updatePastDatesToToday()}}),this.addCommand({id:"update-past-dates-to-custom-date",name:"Update past dates to custom date",callback:()=>{new E(this.app,s=>{this.updatePastDatesToToday(s),new l.Notice(`Updated past dates to ${s}`)}).open()}}),this.addCommand({id:"update-past-dates-in-folder-to-custom-date",name:"Update past dates in task-folder to custom date",callback:()=>{new E(this.app,s=>{this.updatePastDatesInFolder(this.settings.taskFolder,s),new l.Notice(`Updated past dates in ${this.settings.taskFolder} to ${s}`)}).open()}}),this.addCommand({id:"highlight-past-dates-from-custom-date",name:"Highlight past dates from custom date",callback:()=>{new E(this.app,s=>{this.highlightPastDates(s),new l.Notice(`Highlighted past dates from ${s}`)}).open()}}),this.addSettingTab(new A(this.app,this)),this.registerDomEvent(document,"click",e=>{console.log("click",e)}),this.registerInterval(window.setInterval(()=>console.log("setInterval"),5*60*1e3))}async highlightPastDates(t){let e=this.app.workspace.getActiveFile();if(!e)return;let s=await this.app.vault.read(e),g=t||new Date().toISOString().split("T")[0],i=/- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,f=/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,w=s.replace(i,r=>r.replace(f,d=>new Date(d)<new Date(g)?`==${d}==`:d));await this.app.vault.modify(e,w)}async highlightPastDatesInFolder(t,e){let s=this.app.vault.getAbstractFileByPath(t);if(!s||!s.children){console.error("Invalid folder path");return}let g=e||new Date().toISOString().split("T")[0],i=/- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,f=/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,w=async d=>{if(d.extension==="md"){let o=await this.app.vault.read(d),p=o.replace(i,h=>h.replace(f,u=>new Date(u)<new Date(g)?`==${u}==`:u));o!==p&&await this.app.vault.modify(d,p)}},r=async d=>{for(let o of d.children)o instanceof l.TFile?await w(o):o instanceof l.TFolder&&await r(o)};await r(s)}async unhighlightDates(){let t=this.app.workspace.getActiveFile();if(!t)return;let e=await this.app.vault.read(t),s=/- \[ \] .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,g=/==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,i=e.replace(s,f=>f.replace(g,w=>w.slice(2,-2)));await this.app.vault.modify(t,i)}async unhighlightPastDatesInFolder(t,e,s=[]){let g=this.app.vault.getAbstractFileByPath(t);if(!g||!g.children){console.error("Invalid folder path");return}let i=e||new Date().toISOString().split("T")[0],f=/- \[ \] .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,w=/==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,r=async o=>{if(o.extension==="md"){let p=await this.app.vault.read(o),h=p.replace(f,u=>u.replace(w,c=>c.slice(2,-2)));p!==h&&await this.app.vault.modify(o,h)}},d=async o=>{for(let p of o.children)if(p instanceof l.TFolder){if(s.some(h=>p.path===h||p.path.startsWith(h+"/")||p.name===h))continue;await d(p)}else p instanceof l.TFile&&await r(p)};await d(g)}async updatePastDatesToToday(t){let e=this.app.workspace.getActiveFile();if(!e)return;let s=await this.app.vault.read(e),g=t||new Date().toISOString().split("T")[0],i=/- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,f=/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,w=s.replace(i,r=>(console.log(r),r.replace(f,d=>new Date(d)<new Date(g)?g:d)));await this.app.vault.modify(e,w)}async updatePastDatesInFolder(t,e){let s=this.app.vault.getAbstractFileByPath(t);if(!s||!s.children){console.error("Invalid folder path");return}let g=e||new Date().toISOString().split("T")[0],i=/- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,f=/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g,w=async d=>{if(d.extension==="md"){let o=await this.app.vault.read(d),p=o.replace(i,h=>(console.log(h),h.replace(f,u=>new Date(u)<new Date(g)?g:u)));o!==p&&await this.app.vault.modify(d,p)}},r=async d=>{for(let o of d.children)o instanceof l.TFile?await w(o):o instanceof l.TFolder&&await r(o)};await r(s)}async highlightPastDatesInFolderWithExclusions(t,e=[],s,g="both",i){let f=this.app.vault.getAbstractFileByPath(t);if(!f||!f.children){console.error("Invalid folder path");return}let w=s||new Date().toISOString().split("T")[0],r,d,o=/- \[ \] /;(i==null?void 0:i.status)==="completed"?o=/- \[x\] /:(i==null?void 0:i.status)==="all"&&(o=/- \[[ x]\] /),g==="due"?(r=new RegExp(o.source+".*?\u{1F4C5} \\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b","g"),d=/📅 \b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g):g==="scheduled"?(r=new RegExp(o.source+".*?\u23F3 \\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b","g"),d=/⏳ \b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g):(r=new RegExp(o.source+".*?\\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b","g"),d=/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g);let p=async u=>{if(u.extension==="md"){let c=await this.app.vault.read(u),b=c;b=c.replace(r,m=>{if(i){if(i.priorities&&i.priorities.length>0){let a={lowest:"\u23EC",low:"\u{1F53D}",medium:"\u{1F53C}",high:"\u23EB",highest:"\u{1F53A}"},n=!1;i.priorities.includes("normal")&&(Object.values(a).some(v=>m.includes(v))||(n=!0));for(let y of i.priorities)if(y!=="normal"&&m.includes(a[y])){n=!0;break}if(!n)return m}if(!!(i.hasRecurring||i.hasDueDate||i.hasScheduledDate||i.hasStartDate)){let a=m.includes("\u{1F501}"),n=m.includes("\u{1F4C5}"),y=m.includes("\u23F3"),v=m.includes("\u{1F6EB}");if(i.hasRecurring!==a||i.hasDueDate!==n||i.hasScheduledDate!==y||i.hasStartDate!==v)return m}}return m.replace(d,S=>{let a=S.match(/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/);return a&&new Date(a[0])<new Date(w)&&S.includes(a[0])?S.replace(a[0],`==${a[0]}==`):S})}),c!==b&&await this.app.vault.modify(u,b)}},h=async u=>{for(let c of u.children)if(c instanceof l.TFolder){if(e.some(b=>c.path===b||c.path.startsWith(b+"/")||c.name===b))continue;await h(c)}else c instanceof l.TFile&&await p(c)};await h(f)}async unhighlightPastDatesInFolderWithExclusions(t,e=[],s,g="both"){let i=this.app.vault.getAbstractFileByPath(t);if(!i||!i.children){console.error("Invalid folder path");return}let f=s||new Date().toISOString().split("T")[0],w,r;g==="due"?(w=/- \[ \] .*?📅 .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,r=/==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g):g==="scheduled"?(w=/- \[ \] .*?⏳ .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,r=/==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g):(w=/- \[ \] .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g,r=/==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g);let d=async p=>{if(p.extension==="md"){let h=await this.app.vault.read(p),u=h.replace(w,c=>c.replace(r,b=>b.slice(2,-2)));h!==u&&await this.app.vault.modify(p,u)}},o=async p=>{for(let h of p.children)if(h instanceof l.TFolder){if(e.some(u=>h.path===u||h.path.startsWith(u+"/")||h.name===u))continue;await o(h)}else h instanceof l.TFile&&await d(h)};await o(i)}async updatePastDatesInFolderWithExclusions(t,e=[],s,g="both",i){let f=this.app.vault.getAbstractFileByPath(t);if(!f||!f.children){console.error("Invalid folder path");return}let w=s||new Date().toISOString().split("T")[0],r=/- \[ \] /;(i==null?void 0:i.status)==="completed"?r=/- \[x\] /:(i==null?void 0:i.status)==="all"&&(r=/- \[[ x]\] /);let d,o;g==="due"?(d=new RegExp(r.source+".*?\u{1F4C5} \\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b","g"),o=/📅 \b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g):g==="scheduled"?(d=new RegExp(r.source+".*?\u23F3 \\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b","g"),o=/⏳ \b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g):(d=new RegExp(r.source+".*?\\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\\b","g"),o=/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g);let p=async u=>{if(u.extension==="md"){let c=await this.app.vault.read(u),b=c;b=c.replace(d,m=>{if(i){if(i.priorities&&i.priorities.length>0){let a={lowest:"\u23EC",low:"\u{1F53D}",medium:"\u{1F53C}",high:"\u23EB",highest:"\u{1F53A}"},n=!1;i.priorities.includes("normal")&&(Object.values(a).some(v=>m.includes(v))||(n=!0));for(let y of i.priorities)if(y!=="normal"&&m.includes(a[y])){n=!0;break}if(!n)return m}if(!!(i.hasRecurring||i.hasDueDate||i.hasScheduledDate||i.hasStartDate)){let a=m.includes("\u{1F501}"),n=m.includes("\u{1F4C5}"),y=m.includes("\u23F3"),v=m.includes("\u{1F6EB}");if(i.hasRecurring!==a||i.hasDueDate!==n||i.hasScheduledDate!==y||i.hasStartDate!==v)return m}}return m.replace(o,S=>{let a=S.match(/\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/);return a&&new Date(a[0])<new Date(w)?S.replace(a[0],w):S})}),c!==b&&await this.app.vault.modify(u,b)}},h=async u=>{for(let c of u.children)if(c instanceof l.TFolder){if(e.some(b=>c.path===b||c.path.startsWith(b+"/")||c.name===b))continue;await h(c)}else c instanceof l.TFile&&await p(c)};await h(f)}onunload(){console.log("unloading plugin")}async loadSettings(){this.settings=Object.assign({},H,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};var A=class extends l.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Update Dates Plugin Settings"}),t.createEl("h3",{text:"Basic Settings"}),new l.Setting(t).setName("Task folder").setDesc("This should be a folder of task lists of which you want to modify the dates.").addText(e=>e.setPlaceholder("folder").setValue(this.plugin.settings.taskFolder).onChange(async s=>{this.plugin.settings.taskFolder=s,await this.plugin.saveSettings()})),t.createEl("h3",{text:"Default Action Window Settings"}),t.createEl("p",{text:"These settings will be pre-selected when opening the action window."}),new l.Setting(t).setName("Default excluded folders").setDesc("Comma-separated list of folders to exclude by default (e.g. archived,personal)").addText(e=>e.setPlaceholder("folder1,folder2,folder3").setValue(this.plugin.settings.defaultExcludedFolders).onChange(async s=>{this.plugin.settings.defaultExcludedFolders=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Default date type").setDesc("Select which type of dates to update by default").addDropdown(e=>e.addOptions({both:"Both date types",due:"Due dates (\u{1F4C5})",scheduled:"Scheduled dates (\u23F3)"}).setValue(this.plugin.settings.defaultDateType).onChange(async s=>{this.plugin.settings.defaultDateType=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Default task status").setDesc("Select which tasks to process based on their completion status").addDropdown(e=>e.addOptions({unfinished:"Unfinished tasks",completed:"Completed tasks",all:"All tasks"}).setValue(this.plugin.settings.defaultTaskStatus).onChange(async s=>{this.plugin.settings.defaultTaskStatus=s,await this.plugin.saveSettings()})),t.createEl("h4",{text:"Default Priority Filters"}),new l.Setting(t).setName("Lowest Priority (\u23EC)").addToggle(e=>e.setValue(this.plugin.settings.defaultPriorities.lowest).onChange(async s=>{this.plugin.settings.defaultPriorities.lowest=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Low Priority (\u{1F53D})").addToggle(e=>e.setValue(this.plugin.settings.defaultPriorities.low).onChange(async s=>{this.plugin.settings.defaultPriorities.low=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Normal Priority").addToggle(e=>e.setValue(this.plugin.settings.defaultPriorities.normal).onChange(async s=>{this.plugin.settings.defaultPriorities.normal=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Medium Priority (\u{1F53C})").addToggle(e=>e.setValue(this.plugin.settings.defaultPriorities.medium).onChange(async s=>{this.plugin.settings.defaultPriorities.medium=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("High Priority (\u23EB)").addToggle(e=>e.setValue(this.plugin.settings.defaultPriorities.high).onChange(async s=>{this.plugin.settings.defaultPriorities.high=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Highest Priority (\u{1F53A})").addToggle(e=>e.setValue(this.plugin.settings.defaultPriorities.highest).onChange(async s=>{this.plugin.settings.defaultPriorities.highest=s,await this.plugin.saveSettings()})),t.createEl("h4",{text:"Default Date Attributes"}),new l.Setting(t).setName("Recurring (\u{1F501})").addToggle(e=>e.setValue(this.plugin.settings.defaultAttributes.hasRecurring).onChange(async s=>{this.plugin.settings.defaultAttributes.hasRecurring=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Due Date (\u{1F4C5})").addToggle(e=>e.setValue(this.plugin.settings.defaultAttributes.hasDueDate).onChange(async s=>{this.plugin.settings.defaultAttributes.hasDueDate=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Scheduled Date (\u23F3)").addToggle(e=>e.setValue(this.plugin.settings.defaultAttributes.hasScheduledDate).onChange(async s=>{this.plugin.settings.defaultAttributes.hasScheduledDate=s,await this.plugin.saveSettings()})),new l.Setting(t).setName("Start Date (\u{1F6EB})").addToggle(e=>e.setValue(this.plugin.settings.defaultAttributes.hasStartDate).onChange(async s=>{this.plugin.settings.defaultAttributes.hasStartDate=s,await this.plugin.saveSettings()}))}},E=class extends l.Modal{constructor(t,e){super(t);this.callback=e}onOpen(){let{contentEl:t}=this;t.createEl("h3",{text:"Enter date (YYYY-MM-DD)"});let e=t.createEl("input");e.type="date",e.value=new Date().toISOString().split("T")[0],t.createEl("button",{text:"Submit"}).addEventListener("click",()=>{this.callback(e.value),this.close()})}onClose(){let{contentEl:t}=this;t.empty()}};
