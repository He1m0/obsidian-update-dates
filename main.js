/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UpdateDatesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var UpdateDatesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("loading plugin");
    const ribbonIconEl = this.addRibbonIcon("dice", "Update Dates", (evt) => {
      new import_obsidian.Notice("This is a notice!");
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addCommand({
      id: "highlight-past-dates",
      name: "Highlight Past Dates",
      callback: () => {
        this.highlightPastDates();
      }
    });
    this.addCommand({
      id: "unhighlight-dates",
      name: "Unhighlight All Dates",
      callback: () => {
        this.unhighlightDates();
      }
    });
    this.addCommand({
      id: "update-past-dates-to-today",
      name: "Update past dates to today",
      callback: () => {
        this.updatePastDatesToToday();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async highlightPastDates() {
    const activeFile = this.app.workspace.getActiveFile();
    const content = await this.app.vault.read(activeFile);
    const today = new Date().toISOString().split("T")[0];
    const dateRegex = /\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const updatedContent = content.replace(dateRegex, (match) => {
      return new Date(match) < new Date(today) ? `==${match}==` : match;
    });
    await this.app.vault.modify(activeFile, updatedContent);
  }
  async unhighlightDates() {
    const activeFile = this.app.workspace.getActiveFile();
    const content = await this.app.vault.read(activeFile);
    const dateRegex = /==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g;
    const updatedContent = content.replace(dateRegex, (match) => {
      return match.slice(2, -2);
    });
    await this.app.vault.modify(activeFile, updatedContent);
  }
  async updatePastDatesToToday() {
    const activeFile = this.app.workspace.getActiveFile();
    const content = await this.app.vault.read(activeFile);
    const today = new Date().toISOString().split("T")[0];
    const dateRegex = /\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const updatedContent = content.replace(dateRegex, (match) => {
      return new Date(match) < new Date(today) ? today : match;
    });
    await this.app.vault.modify(activeFile, updatedContent);
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Setting #1").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
