/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UpdateDatesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  taskFolder: "tasks"
};
var UpdateDatesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("loading plugin");
    const ribbonIconEl = this.addRibbonIcon("calendar-arrow-down", "Update Dates", (evt) => {
      const menu = new import_obsidian.Menu();
      menu.addItem(
        (item) => item.setTitle("Highlight dates in task-folder").setIcon("eye").onClick(() => {
          this.highlightPastDatesInFolder(this.settings.taskFolder);
          new import_obsidian.Notice("Highlighted dates in task-folder: " + this.settings.taskFolder);
        })
      );
      menu.addItem(
        (item) => item.setTitle("Unhighlight dates in task-folder").setIcon("eye-off").onClick(() => {
          this.unhighlightPastDatesInFolder(this.settings.taskFolder);
          new import_obsidian.Notice("Unhighlighted dates in task-folder: " + this.settings.taskFolder);
        })
      );
      menu.addItem(
        (item) => item.setTitle("Update dates in task-folder").setIcon("calendar-check-2").onClick(() => {
          this.updatePastDatesInFolder(this.settings.taskFolder);
          new import_obsidian.Notice("Updated dates in task-folder: " + this.settings.taskFolder);
        })
      );
      menu.showAtMouseEvent(evt);
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addCommand({
      id: "highlight-past-dates",
      name: "Highlight Past Dates",
      callback: () => {
        this.highlightPastDates();
      }
    });
    this.addCommand({
      id: "unhighlight-dates",
      name: "Unhighlight All Dates",
      callback: () => {
        this.unhighlightDates();
      }
    });
    this.addCommand({
      id: "update-past-dates-to-today",
      name: "Update past dates to today",
      callback: () => {
        this.updatePastDatesToToday();
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async highlightPastDates() {
    const activeFile = this.app.workspace.getActiveFile();
    const content = await this.app.vault.read(activeFile);
    const today = new Date().toISOString().split("T")[0];
    const unfinishedDateRegex = /- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const dateRegex = /\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const updatedContent = content.replace(unfinishedDateRegex, (line) => {
      return line.replace(dateRegex, (match) => {
        return new Date(match) < new Date(today) ? `==${match}==` : match;
      });
    });
    await this.app.vault.modify(activeFile, updatedContent);
  }
  async highlightPastDatesInFolder(folderPath) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder || !folder.children) {
      console.error("Invalid folder path");
      return;
    }
    const today = new Date().toISOString().split("T")[0];
    const unfinishedDateRegex = /- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const dateRegex = /\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const processFile = async (file) => {
      if (file.extension === "md") {
        const content = await this.app.vault.read(file);
        const updatedContent = content.replace(unfinishedDateRegex, (line) => {
          return line.replace(dateRegex, (match) => {
            return new Date(match) < new Date(today) ? `==${match}==` : match;
          });
        });
        if (content !== updatedContent) {
          await this.app.vault.modify(file, updatedContent);
        }
      }
    };
    const processFolder = async (folder2) => {
      for (const child of folder2.children) {
        if (!child.children) {
          await processFile(child);
        } else if (child.children) {
          await processFolder(child);
        }
      }
    };
    await processFolder(folder);
  }
  async unhighlightDates() {
    const activeFile = this.app.workspace.getActiveFile();
    const content = await this.app.vault.read(activeFile);
    const unfinishedDateRegex = /- \[ \] .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g;
    const dateRegex = /==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g;
    const updatedContent = content.replace(unfinishedDateRegex, (line) => {
      return line.replace(dateRegex, (match) => {
        return match.slice(2, -2);
      });
    });
    await this.app.vault.modify(activeFile, updatedContent);
  }
  async unhighlightPastDatesInFolder(folderPath) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder || !folder.children) {
      console.error("Invalid folder path");
      return;
    }
    const today = new Date().toISOString().split("T")[0];
    const unfinishedDateRegex = /- \[ \] .*?==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g;
    const dateRegex = /==\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b==/g;
    const processFile = async (file) => {
      if (file.extension === "md") {
        const content = await this.app.vault.read(file);
        const updatedContent = content.replace(unfinishedDateRegex, (line) => {
          return line.replace(dateRegex, (match) => {
            return match.slice(2, -2);
          });
        });
        if (content !== updatedContent) {
          await this.app.vault.modify(file, updatedContent);
        }
      }
    };
    const processFolder = async (folder2) => {
      for (const child of folder2.children) {
        if (!child.children) {
          await processFile(child);
        } else if (child.children) {
          await processFolder(child);
        }
      }
    };
    await processFolder(folder);
  }
  async updatePastDatesToToday() {
    const activeFile = this.app.workspace.getActiveFile();
    const content = await this.app.vault.read(activeFile);
    const today = new Date().toISOString().split("T")[0];
    const unfinishedDateRegex = /- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const dateRegex = /\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const updatedContent = content.replace(unfinishedDateRegex, (line) => {
      console.log(line);
      return line.replace(dateRegex, (dateMatch) => {
        return new Date(dateMatch) < new Date(today) ? today : dateMatch;
      });
    });
    await this.app.vault.modify(activeFile, updatedContent);
  }
  async updatePastDatesInFolder(folderPath) {
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder || !folder.children) {
      console.error("Invalid folder path");
      return;
    }
    const today = new Date().toISOString().split("T")[0];
    const unfinishedDateRegex = /- \[ \] .*?\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const dateRegex = /\b(20[0-9]{2}|19[0-9]{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])\b/g;
    const processFile = async (file) => {
      if (file.extension === "md") {
        const content = await this.app.vault.read(file);
        const updatedContent = content.replace(unfinishedDateRegex, (line) => {
          console.log(line);
          return line.replace(dateRegex, (dateMatch) => {
            return new Date(dateMatch) < new Date(today) ? today : dateMatch;
          });
        });
        if (content !== updatedContent) {
          await this.app.vault.modify(file, updatedContent);
        }
      }
    };
    const processFolder = async (folder2) => {
      for (const child of folder2.children) {
        if (!child.children) {
          await processFile(child);
        } else if (child.children) {
          await processFolder(child);
        }
      }
    };
    await processFolder(folder);
  }
  onunload() {
    console.log("unloading plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Task folder").setDesc("This should be a folder of task lists of which you want to modify the dates.").addText((text) => text.setPlaceholder("folder").setValue(this.plugin.settings.taskFolder).onChange(async (value) => {
      this.plugin.settings.taskFolder = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
